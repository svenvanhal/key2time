using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Serialization;
using Timetabling.Resources;

namespace Timetabling.Algorithms
{
    class FetOutputProcessor
    {

        private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();

        private readonly string inputName;
        private readonly string outputDir;

        /// <summary>
        /// Create new FetOutputProcessor
        /// </summary>
        /// <param name="inputName">Name of the input file.</param>
        /// <param name="outputDir">Location of the FET-CL output.</param>
        public FetOutputProcessor(string inputName, string outputDir)
        {
            this.inputName = inputName;
            this.outputDir = outputDir;
        }

        /// <summary>
        /// Public facing method which processes the FET algorithm output.
        /// </summary>
        /// <returns>Timetable</returns>
        public Timetable GetTimetable()
        {

            // Remove unnecessary files
            CleanupOutputDir();

            Logger.Info("Looking for FET-CL activities output file.");

            // Find output file
            var outputFilePath = Path.Combine(outputDir, inputName) + "_activities.xml";
            if (!File.Exists(outputFilePath)) throw new FileNotFoundException("FET-CL output file could not be found.");

            // Deserialize XML
            var tt = XmlToTimetable(outputFilePath);

            Logger.Info("Found a timetable with {0} activities in FET output.", tt.Activities.Length);

            return tt;
        }

        /// <summary>
        /// Removes unnecessary output generated by FET.
        /// Should only retain original FET file, timetable activities XML and logs.
        /// </summary>
        protected void CleanupOutputDir()
        {

            Logger.Info("Cleaning up output dir");

            // List all files in output directory
            var files = Directory.EnumerateFiles(outputDir, "*.*")
                .Where(s => s.EndsWith(".html") ||
                            s.EndsWith(".css") ||
                            s.EndsWith("_subgroups.xml") ||
                            s.EndsWith("_subgroups.xml"));

            // Delete all files matching pattern
            foreach (var file in files)
            {
                Logger.Debug("Deleting output file: " + file);
                File.Delete(file);
            }

        }

        /// <summary>
        /// Deserializes an XML file to a Timetable object.
        /// </summary>
        /// <param name="file">FET algorithm output XML file.</param>
        /// <returns>A Timetable object.</returns>
        /// <exception cref="SerializationException">XML serialization does not create a Timetable object.</exception>
        protected Timetable XmlToTimetable(string file)
        {

            // Initialize
            var serializer = new XmlSerializer(typeof(Timetable));
            Timetable tt;

            // Read and deserialize XML
            using (var reader = XmlReader.Create(file))
            {
                tt = serializer.Deserialize(reader) as Timetable;
            }

            // Check that the deserialization succeeded
            if (tt == null) throw new SerializationException("Could not deserialize timetable XML.");

            return tt;
        }

    }
}
